	<!DOCTYPE html>
	<html lang="en">

	<head>
	    <meta charset="utf-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <meta name="description" content="">
	    <meta name="author" content="">

	    <title>Felipe Meneguzzi</title>
		
	    <!-- css -->
	    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
	    <link href="font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
		<link href="css/nivo-lightbox.css" rel="stylesheet" />
		<link href="css/nivo-lightbox-theme/default/default.css" rel="stylesheet" type="text/css" />
		<link href="css/animations.css" rel="stylesheet" />
	    <link href="css/style.css" rel="stylesheet">
		<link href="color/default.css" rel="stylesheet">

	</head>

	<body id="page-top" data-spy="scroll" data-target=".navbar-custom">
	

	<!-- Section: publications -->
    <section id="publications" class="home-section color-dark text-center bg-gray">
		<div class="container marginbot-50">
			<div class="row">
				<div class="col-lg-8 col-lg-offset-2">
					<div>
					<div class="section-heading text-center">
					<h2 class="h-bold">Software</h2>
					<div class="divider-header"></div>
					</div>
					</div>
				</div>
			</div>
		</div>

		<div class="container unstyled">
			<div class="row">
				<div class="col-md-10 col-md-offset-1 text-justify">

					<h3>&nu;-BDI</h3>
					<p class="marginbot-10">&nu;-BDI (nu-BDI) is an interpreter for a normative agent that uses constraints on plan instantiations to enforce normative stipulations of obligations and prohibitions. 
					This interpreter is the result of the work I have been carrying out with Nir Oren, Wamberto Vasconcelos and Michael Luck, most of which is currently unpublished. 
					The basic work on this interpreter can be found in the paper <a href="pubs/acita-2010-nuBDI.pdf">Using Constraints for Norm-aware BDI Agents</a>
					It is implemented as an extension of the popular <a href="http://jason.sourceforge.net/">Jason</a> interpreter. 
					I decided to share my code through SourceForge: </p>
					<a href="http://sourceforge.net/projects/nubdi"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=197281&amp;type=10" width="80" height="15" alt="Get nu-BDI at SourceForge.net. Fast, secure and Free Open Source software downloads" /></a>

					<h3>EmPlan / JavaGP</h3>
					<p class="marginbot-10"> EmPlan is a planner I implemented during my MSc for my planning <a href="#xbdi">BDI agent</a>, while JavaGP is a recent Java reimplementation I made of the same algorithm for <a href="#peleus"> integration with Jason</a>. After having noticed that there are no full Java implementations of Graphplan around on the internet, I decided to share my code through SourceForge:</p>
					<a href="http://sourceforge.net/projects/emplan"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=197281&amp;type=10" width="80" height="15" alt="Get Graphplan Implementations at SourceForge.net. Fast, secure and Free Open Source software downloads"/></a>

					<h3>HTN2MDP</h3>
					<p> HTN2MDP is a probabilistic planner that takes as input a deterministic HTN 
					domain, described in a subset of the popular <a href="http://sourceforge.net/projects/shop/">JSHOP HTN domain description language </a>.
					It generates a policy that tells, for each possible state in the domain, what is the best action to take. This planning consists of converting the HTN domain into a stochastic planning domain in the MDP format, and planning using an MDP solver.</p>

					<p>The source code and binaries are available for download below. The package includes
    				the binaries for 
				    <a href="https://sourceforge.net/projects/jason/files/jason/version%201.3.1/">Jason 1.3.1</a>
				 	as well as <a href="http://code.google.com/p/aima-java/">AIMA Libraries</a> (for the MDP solver).</p>

					<p><i class="fa fa-download"></i> HTN2MDP - <a href="download/ita-htn2mdp-0.1.zip">src</a></p>

					<h3>Any Time Cognition - ANTICO</h3>

					<p> ANTICO is a proof-of-concept demo of a proactive information assistant I helped implement while at Carnegie Mellon University. It uses plan/intention recognition and probabilistic plan prediction to detect a human user's future information needs in order to provide time-sensitive information and guidance. The demo itself is intended to help a disaster response coordinator to go through all necessary steps to react to natural disasters and/or terrorist attacks.
					</p>

					<div class="text-center">
					<object width="640" height="390"><param name="movie" value="http://www.youtube-nocookie.com/v/2aHH4Ip0pvI?fs=1&amp;hl=en_US&amp;hd=1"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube-nocookie.com/v/2aHH4Ip0pvI?fs=1&amp;hl=en_US&amp;hd=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="390"></embed></object>
					</div>

					<h3>AgentSpeak(PL) - Peleus</h3>
					<p>Peleus is an implementation of planning capabilities within the AgentSpeak architecture, 
					also known as <a href="http://www.meneguzzi.eu/felipe/pubs/dalt07light.pdf">AgentSpeak(PL)</a>
					as published in two DALT papers: 
					<a href="http://www.meneguzzi.eu/felipe/pubs/dalt2007.pdf">Composing high-level plans for 
					declarative agent programming</a>, and 
					<a href="http://www.meneguzzi.eu/felipe/pubs/dalt2008.pdf">Leveraging new plans in AgentSpeak(PL)</a>.
					AgentSpeak consists of an agent architecture following the tradition of PRS agents, which
					define agents with procedural reasoning capabilities. Procedural reasoning is a mechanism
					used by agents to improve their runtime efficiency by limiting the agent's choices to concrete
					plans of actions that are adopted whenever a certain well-defined situation is detected by 
					the agent. This constrains the agent's flexibility at runtime, since a designer has to foresee
					every possible relevant situation and define complete adequate plans for the agent to react
					to them. Peleus allows an agent to reason over declarative goals (as well as procedural ones)
					and generate plans to satisfy them by composing lower-level AgentSpeak plans. To compose these
					plans, Peleus infers the preconditions and effects of AgentSpeak plans and convert them into
					a STRIPS representation which is handed down to an external planning module. In this version 
					of Peleus, we allow a designer to choose between the same planning process used by X-BDI, or
					an open-source Java implementation of <a href="http://www.cs.cmu.edu/~avrim/graphplan.html">Graphplan</a> 
					available at <a href="https://sourceforge.net/">SourceForge </a> 
					(<a href="https://sourceforge.net/projects/jplan/">JPlan</a>). Peleus was implemented as an 
					extension to <a href="http://jason.sourceforge.net/">Jason</a>, which is a Java implementation 
					of AgentSpeak created by  <a href="http://www.dur.ac.uk/r.bordini/">Rafael Bordini</a> and 
					<a href="http://www.inf.furb.br/~jomi/">Jomi H&uuml;bner</a>. The name of this implementation 
					is to conform with Bordini and H&uuml;bner&apos;s naming of their AgentSpeak implementation, 
					namely Jason from the Greek tale of the argonauts.
  					</p>
  					<p>The source code and binaries of Peleus are available for download below. The package includes
 					the binaries for <a href="http://prdownloads.sourceforge.net/jason/Jason-0.9.3.zip?download">Jason 0.9.3</a>
 					as well as <a href="http://sourceforge.net/projects/jplan">JPlan</a>, and EmPlan.</p>

 					<p><i class="fa fa-download"></i> Peleus - <a href="download/peleus.zip">bin/src</a></p>

 					<h3>Jason Scripted Environment</h3>

 					<p>This is a utility package including an implementation of a Jason environment driven by a script to generate new perception events at specific times during the execution of a Jason multiagent system. Class <tt>ScriptedEnvironment</tt> takes as a parameter an XML file with nodes containing a list of perceptual updates for all agents and the time at which these updates must be sent to all agents in the environment. This script file follows the schema available at 
  	 				<a href="http://www.meneguzzi.eu/schema/jason-script.xsd">www.meneguzzi.eu/schema/jason-script.xsd</a>, an example of usage of this script is available at <a href="http://www.meneguzzi.eu/schema/script.xml">www.meneguzzi.eu/schema/script.xml</a>.
  					</p>

  					<p>The source code and binaries are available for download below. The package includes the binaries for <a href="http://sourceforge.net/project/showfiles.php?group_id=98417&package_id=105352&release_id=651757">Jason 1.2</a>
  					</p>

  					<p><i class="fa fa-download"></i> ScriptedEnvironment - <a href="download/jasonenv-1.0.zip">src</a> <a href="download/jasonenv.jar">bin</a> <br />
					<i class="fa fa-download"></i> Example - <a href="http://www.meneguzzi.eu/schema/script.xml">script.xml</a></p>


					<h3>Normative AgentSpeak - Iovis</h3>
					<p>Iovis is an implementation of an AgentSpeak interpreter that includes a meta- level reasoning action library, and plans to process and comply to norms, following the technique from the paper <a href="http://www.meneguzzi.eu/felipe/pubs/aamas-norms-2009.pdf"> Norm-based behaviour modification in BDI agents</a>. With Iovis, a developer can deploy agents that change their plan libraries in reaction to norms from the environment, or from other agents (through 
					<a href="http://www.meneguzzi.eu/felipe/pubs/aamas2008.pdf">electronic contracts</a>, for example).
					</p>

					<p>The source code for Iovis is available for download below. The package includes
 					the binaries for <a href="http://sourceforge.net/project/showfiles.php?group_id=98417&package_id=105352&release_id=651757">Jason 1.2</a>
					as well as <a href="#jasonenv">Jason Scripted Environment</a>.</p>

 					<p><i class="fa fa-download"></i> Iovis - <a href="download/iovis-0.3.zip">src</a></p>
 	
 					<h3>Distributed Planning - Kastor</h3>

 					<p>Kastor is an implementation of an AgentSpeak interpreter extended with <a 
					href="http://portal.acm.org/citation.cfm?id=1160869">plan patterns</a> for the creation of
					distributed plans following the technique from the paper 
				    <a href="http://www.meneguzzi.eu/felipe/pubs/at2ai2008.pdf">Interaction among agents that 
				    plan</a>. In <a href="http://www.meneguzzi.eu/felipe/pubs/at2ai2008-slides.pdf">Kastor</a>,
				    a developer can define <em>external plans</em> for each agent through the <em>EP</em> plan
				    pattern, which creates a communication endpoint in the sharing agent allowing other agents
				    in the society to request this plan to be executed on their behalf.
				  	</p> 

					<p>The source code and binaries of Kastor are available for download below. The package includes
					the binaries for <a href="http://sourceforge.net/project/showfiles.php?group_id=98417&package_id=105352&release_id=651757">Jason 1.2</a>
					as well as <a href="#peleus">Peleus</a>, and 
					<a href="#jasonenv">Jason Scripted Environment</a>.</p>
					 
					<p><i class="fa fa-download"></i> Kastor - <a href="download/kastor-0.5.zip">src</a> <a href="download/kastor.jar">bin</a></p>

					<h3>Orpheus</h3>

					<p>Orpheus is an implementation of an AgentSpeak-based client for the classic version of the
					<a href="http://www.sics.se/tac/page.php?id=1">Trading Agent Competition</a> (TAC). At the 
					moment the implementation is a rather simple adapter pattern bridging a Jason agent to the
					reference Java AgentWare library provided by <a href="http://www.sics.se/">SICS </a> to do 
					the low-level communication with the <a href="http://www.sics.se/tac/page.php?id=12#server">TAC server</a>.
					This, as well as other technical limitations, should be addressed some time in the future. 
					As with Peleus, this software was named to conform with Jason's argonauts.
					</p>

					<p>The source code and binaries of the TAC agent are provided below, the package includes the
					binary package of <a href="http://prdownloads.sourceforge.net/jason">Jason</a>, 
					as well as the binary package of <a href="http://www.sics.se/tac/page.php?id=12#aw">AgentWare</a>.
					</p>

					<p>
					<i class="fa fa-download"></i> Orpheus (for <a href="http://prdownloads.sourceforge.net/jason/Jason-0.8.zip?download">Jason 0.8</a>) - <a href="http://prdownloads.sourceforge.net/jason/trading-agent-competition.zip?download">bin/src</a><br />
					<i class="fa fa-download"></i> Orpheus (for <a href="http://prdownloads.sourceforge.net/jason/Jason-0.9.4.zip?download">Jason 0.9.4</a>) - <a href="download/tac-jason.zip">bin/src</a>
					</p>


					<h3>X2-BDI / AgentViewer</h3>

					<p>X2-BDI and Agent Viewer are two programs implemented as part of the
					research conducted throughout my masters course in order to verify the
					viability of the theories defended in my masters dissertation. X2-BDI is an
					extension to the X-BDI agent model/interpreter created by Michael Móra in
					his Ph.D. thesis, it includes a C++ implementation of the Graphplan planner
					which is used by the agent in order to perform means-ends reasoning. Agent
					Viewer is a Java tool that provides a graphical interface intended to ease
					interaction with X2-BDI, which was originally done through a Prolog
					console.</p>

					<p>The implementations of X2-BDI and Agent Viewer are available for download
					below, as well as the C++ implementation of Graphplan used in X2-BDI and
					compiled as a windows dynamic library. The sources are also available for
					compilation in other platforms.</p>

					<p><i class="fa fa-download"></i> X2-BDI - <a href="download/xbdi-1.4.zip">src/bin</a> (Requires SICStusProlog version 3.8.3) <br />
					<i class="fa fa-download"></i> <a href="http://emplan.sourceforge.net"> EmPlan</a> (C++ implementation of Graphplan) - <a href="download/emplan.zip">src</a> <a href="download/emplan-bin.zip">bin</a><br />
					<i class="fa fa-download"></i> Agent Viewer (Java Installer) - <a href="download/avinstaller.jar">bin</a>
					</p>

					<p>It is worth mentioning that these are experimental software programs that
					were not subjected to any formal testing process. Usage of the programs or
					its sources is free of charge for non-commercial use, otherwise it is
					necessary to contact the author (i.e. me).</p>


					<h3>DocDB</h3>

					<p>DocDB is an extremely simple program that detects duplicates of files within a specific 
					local folder. It was created to help me solve the problem of multiple versions of papers I
					download in the course of "gathering" research papers throughout the year for my PhD. Though 
					I always try to be disciplined and keep a folder structure just for papers, and I try to
					categorize the PDF/PS files as I download them, as the number of files I download increases 
					it becomes harder to remember things I downloaded or not, and I end up saving the same paper 
					under different names in different folders. As another helper for this chore of bookkeeping
					research papers I use <a href="http://jabref.sourceforge.net/">JabRef</a>, which is a brilliant
					program to manage a <a href="http://en.wikipedia.org/wiki/Bibtex">BibTeX</a> reference database.
					Since DocDB cannot even be qualified as 
					<a href="http://en.wikipedia.org/wiki/Development_stage#Alpha">alpha</a>-quality software, 
					user discretion is advised. Even though it is unlikely that any critical bug is present given
					the simplicity of this software, I recommend backing up the target files before executing 
					DocDB.
					</p>

					<p>The source code and binaries for DocDB are provided below. No build files have been 
					created, but <a href="http://www.eclipse.org/">Eclipse</a> project files are included 
					in the source code, making it simple to compile and recreate the executable 
					<a href="http://en.wikipedia.org/wiki/JAR_(file_format)">JAR</a> file  using Eclipse's 
					interface.</p>

					<p><i class="fa fa-download"></i> DocDB - <a href="download/docdb.src.zip">src</a> <a href="download/docdb.jar">bin</a></p>


					<h3>Open iTerm Here</h3>

					<p>Not strictly <em>software</em>, but rather a Mac OS X workflow that adds a
					context menu item in Finder that when invoked opens an <a href="http://iterm.sourceforge.net/">iTerm</a>
					terminal tab, cd-ing to the selected directory. It is rather neat and useful 
					if you use a lot of terminal applications in the Mac, and if you, like me,
					does not like Terminal.app too much. This workflow was inspired by 
					<a href="http://blog.leenarts.net/2009/09/03/open-service-here/">Jeroen Leenars's</a>
					workflow that opens Terminal.app instead of iTerm. Most of the code was unashamedly 
					poached from an old 
					<a href="http://www.macosxhints.com/article.php?story=20050827164648766&lsrc=osxh">macosxhints forum</a>,
					attesting to my relative ignorance of Mac OS X scripting.
					</p>

					<p>The workflow is provided below, and is provided as is, I do not guarantee it will work,
					even though it has worked in my Snow Leopard installation. It includes installation
					instructions, which are basically the following: open the zip file, go into the
					<tt>open-here</tt> folder, and copy <tt>Open iTerm Here.workflow</tt> to 
					<tt>~/Library/Services</tt>.</p>

   					<p><i class="fa fa-download"></i><a href="download/open-here.zip"> Open iTerm Here</a></p>

   					<h3>Java Games</h3>
					<p>Coming Soon</p>



	    		</div>
			</div>
		</div>
	</section>
	<!-- /Section: publications -->

		
		
	

    <!-- Core JavaScript Files -->
    <script src="js/jquery.min.js"></script>	 
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
	<script src="js/jquery.sticky.js"></script>
    <script src="js/jquery.easing.min.js"></script>	
	<script src="js/jquery.scrollTo.js"></script>
	<script src="js/jquery.appear.js"></script>
	<script src="js/stellar.js"></script>
	<script src="js/nivo-lightbox.min.js"></script>
	

	<script src="js/css3-animate-it.js"></script>

	</body>

</html>
